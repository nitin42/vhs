const xpath = require('simple-xpath-position');const includes = require('array-includes');const eventTypes = ['click'];const events = [];window.events = events;const record = (event) => {    if (!eventTypes.includes(event.type)) return;    event.preventDefault();    let path = xpath.fromNode(event.target, document);    let eventFired = {        type: event.type,        which: event.which,        path    };    events.push(eventFired);    fire(eventFired);};const getElement = (path) => {    return xpath.toNode(path, document);};const click = (element) => {    $(element).trigger('click');};const keypress = (element, which) => {    let key = String.fromCharCode(which);    // Simulate keypress};const fire = ({type, which, path}) => {    return new Promise(resolve => {        detachHandlers();        let element = getElement(path);        if (type === 'click') click(element);        else if (type === 'keypress') keypress(element, which);        attachHandlers();        resolve();    });};const playFramesRecursively = (frame) => {    if (!events[frame]) return;    fire(events[frame]).then(() => playFramesRecursively(++frame));};const getTriggers = () => {    let triggers = {};    eventTypes.map(type => triggers[type] = record);    return triggers;};const attachHandlers = () => {    let triggers = getTriggers();    $('html').on(triggers);};const detachHandlers = () => {    let triggers = getTriggers();    $('html').off(triggers);};window.play = () => {    playFramesRecursively(0);};$(() => {    attachHandlers();});