const xpath = require('simple-xpath-position');require('core-js/fn/array/includes');const eventTypes = ['click'];const events = [];window.events = events;let lastEventTimestamp;const record = (event) => {    if (!eventTypes.includes(event.type)) return;    event.preventDefault();    let waitEvent = {        type: 'wait',        duration: (new Date().getTime() - lastEventTimestamp) || 0    };    events.push(waitEvent);    lastEventTimestamp = new Date().getTime();    let path = xpath.fromNode(event.target, document);    let eventFired = {        type: event.type,        which: event.which,        path    };    events.push(eventFired);    fire(eventFired);};const getElement = (path) => {    return xpath.toNode(path, document);};const click = ({path}, resolve) => {    let element = getElement(path);    $(element).trigger('click');    resolve();};const keypress = ({path, which},resolve) => {    let element = getElement(path);    let key = String.fromCharCode(event.which);    // Simulate keypress    resolve();};const wait = ({duration}, resolve) => {    setTimeout(() => resolve(), duration);};// TODO: Simplify this function with async-awaitconst fire = (event) => {    return new Promise(resolve => {        detachHandlers();        new Promise((resolve, reject) => {            let type = event.type;            if (type === 'click') click(event, resolve);            else if (type === 'keypress') keypress(event, resolve);            else if (type === 'wait') wait(event, resolve);            else reject(new Error('Unknown event type. Could not play'));        }).then(() => {            attachHandlers();            resolve();        });    });};const playFramesRecursively = (frame) => {    if (!events[frame]) return;    fire(events[frame]).then(() => playFramesRecursively(++frame));};const getTriggers = () => {    let triggers = {};    eventTypes.map(type => triggers[type] = record);    return triggers;};const attachHandlers = () => {    let triggers = getTriggers();    $('html').on(triggers);};const detachHandlers = () => {    let triggers = getTriggers();    $('html').off(triggers);};window.play = () => {    playFramesRecursively(0);};$(() => {    attachHandlers();});